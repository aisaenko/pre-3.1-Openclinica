DROP TRIGGER item_AUDIT_TRIGGER ON ITEM;
DROP FUNCTION item_AUDIT_SQL();


CREATE FUNCTION item_AUDIT_SQL() RETURNS OPAQUE AS '
DECLARE
	pk INTEGER;
BEGIN 
SELECT INTO PK NEXTVAL(''audit_log_sequence'');

INSERT INTO AUDIT_EVENT (AUDIT_ID, AUDIT_DATE, AUDIT_TABLE, 
				USER_ID, ENTITY_ID, REASON_FOR_CHANGE)
	VALUES
	(pk, now(), 
	''ITEM'', 
	NEW.UPDATE_ID,
	NEW.ITEM_ID, 
	''UPDATE TRIGGER ACTIVATED'');

IF OLD.ITEM_ID IS NOT NULL AND (OLD.ITEM_ID <> NEW.ITEM_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''ITEM_ID'', OLD.ITEM_ID, NEW.ITEM_ID);
	
END IF;

IF OLD.NAME IS NOT NULL AND (OLD.NAME <> NEW.NAME)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''NAME'', OLD.NAME, NEW.NAME);
	
END IF;
IF OLD.DESCRIPTION IS NOT NULL AND (OLD.DESCRIPTION <> NEW.DESCRIPTION)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DESCRIPTION'', OLD.DESCRIPTION, NEW.DESCRIPTION);
	
END IF;
IF OLD.STATUS_ID IS NOT NULL AND (OLD.STATUS_ID <> NEW.STATUS_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''STATUS_ID'', OLD.STATUS_ID, NEW.STATUS_ID);
	
END IF;
IF OLD.DATE_CREATED IS NOT NULL AND (OLD.DATE_CREATED <> NEW.DATE_CREATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_CREATED'', OLD.DATE_CREATED, NEW.DATE_CREATED);
	
END IF;
IF OLD.DATE_UPDATED IS NOT NULL AND (OLD.DATE_UPDATED <> NEW.DATE_UPDATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_UPDATED'', OLD.DATE_UPDATED, NEW.DATE_UPDATED);
	
END IF;
IF OLD.OWNER_ID IS NOT NULL AND (OLD.OWNER_ID <> NEW.OWNER_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''OWNER_ID'', OLD.OWNER_ID, NEW.OWNER_ID);
	
END IF;
IF OLD.UPDATE_ID IS NOT NULL AND (OLD.UPDATE_ID <> NEW.UPDATE_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''UPDATE_ID'', OLD.UPDATE_ID, NEW.UPDATE_ID);
	
END IF;
IF OLD.UNITS IS NOT NULL AND (OLD.UNITS <> NEW.UNITS)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''UNITS'', OLD.UNITS, NEW.UNITS);
	
END IF;
IF OLD.PHI_STATUS IS NOT NULL AND (OLD.PHI_STATUS <> NEW.PHI_STATUS)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''PHI_STATUS'', OLD.PHI_STATUS, NEW.PHI_STATUS);
	
END IF;
IF OLD.ITEM_DATA_TYPE_ID IS NOT NULL AND (OLD.ITEM_DATA_TYPE_ID <> NEW.ITEM_DATA_TYPE_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''ITEM_DATA_TYPE_ID'', OLD.ITEM_DATA_TYPE_ID, NEW.ITEM_DATA_TYPE_ID);
	
END IF;
IF OLD.ITEM_REFERENCE_TYPE_ID IS NOT NULL AND (OLD.ITEM_REFERENCE_TYPE_ID <> NEW.ITEM_REFERENCE_TYPE_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''ITEM_REFERENCE_TYPE_ID'', OLD.ITEM_REFERENCE_TYPE_ID, NEW.ITEM_REFERENCE_TYPE_ID);
	
END IF;

return null;
END;
' LANGUAGE 'plpgsql';


CREATE TRIGGER item_AUDIT_TRIGGER
AFTER UPDATE
ON ITEM
FOR EACH ROW
EXECUTE PROCEDURE item_audit_sql();