DROP TRIGGER eventcrf_AUDIT_TRIGGER ON EVENT_CRF;
DROP FUNCTION eventcrf_AUDIT_SQL();


CREATE FUNCTION eventcrf_AUDIT_SQL() RETURNS OPAQUE AS '
DECLARE
	pk INTEGER;
BEGIN 
SELECT INTO PK NEXTVAL(''audit_log_sequence'');

INSERT INTO AUDIT_EVENT (AUDIT_ID, AUDIT_DATE, AUDIT_TABLE, 
				USER_ID, ENTITY_ID, REASON_FOR_CHANGE)
	VALUES
	(pk, now(), 
	''EVENT_CRF'', 
	NEW.UPDATE_ID,
	NEW.EVENT_CRF_ID,
	''UPDATE TRIGGER ACTIVATED'');

IF OLD.STUDY_EVENT_ID IS NOT NULL AND (OLD.STUDY_EVENT_ID <> NEW.STUDY_EVENT_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''STUDY_EVENT_ID'', OLD.STUDY_EVENT_ID, NEW.STUDY_EVENT_ID);
	
END IF;
IF OLD.CRF_VERSION_ID IS NOT NULL AND (OLD.CRF_VERSION_ID <> NEW.CRF_VERSION_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''CRF_VERSION_ID'', OLD.CRF_VERSION_ID, NEW.CRF_VERSION_ID);
	
END IF;
IF OLD.DATE_INTERVIEWED IS NOT NULL AND (OLD.DATE_INTERVIEWED <> NEW.DATE_INTERVIEWED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_INTERVIEWED'', OLD.DATE_INTERVIEWED, NEW.DATE_INTERVIEWED);
	
END IF;
IF OLD.INTERVIEWER_NAME IS NOT NULL AND (OLD.INTERVIEWER_NAME <> NEW.INTERVIEWER_NAME)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''INTERVIEWER_NAME'', OLD.INTERVIEWER_NAME, NEW.INTERVIEWER_NAME);
	
END IF;
IF OLD.COMPLETION_STATUS_ID IS NOT NULL AND (OLD.COMPLETION_STATUS_ID <> NEW.COMPLETION_STATUS_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''COMPLETION_STATUS_ID'', OLD.COMPLETION_STATUS_ID, NEW.COMPLETION_STATUS_ID);
	
END IF;
IF OLD.STATUS_ID IS NOT NULL AND (OLD.STATUS_ID <> NEW.STATUS_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''STATUS_ID'', OLD.STATUS_ID, NEW.STATUS_ID);
	
END IF;
IF OLD.ANNOTATIONS IS NOT NULL AND (OLD.ANNOTATIONS <> NEW.ANNOTATIONS)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''ANNOTATIONS'', OLD.ANNOTATIONS, NEW.ANNOTATIONS);
	
END IF;
IF OLD.DATE_COMPLETED IS NOT NULL AND (OLD.DATE_COMPLETED <> NEW.DATE_COMPLETED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_COMPLETED'', OLD.DATE_COMPLETED, NEW.DATE_COMPLETED);
	
END IF;IF OLD.VALIDATOR_ID IS NOT NULL AND (OLD.VALIDATOR_ID <> NEW.VALIDATOR_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''VALIDATOR_ID'', OLD.VALIDATOR_ID, NEW.VALIDATOR_ID);
	
END IF;
IF OLD.DATE_VALIDATE IS NOT NULL AND (OLD.DATE_VALIDATE <> NEW.DATE_VALIDATE)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_VALIDATE'', OLD.DATE_VALIDATE, NEW.DATE_VALIDATE);
	
END IF;
IF OLD.DATE_VALIDATE_COMPLETED IS NOT NULL AND (OLD.DATE_VALIDATE_COMPLETED <> NEW.DATE_VALIDATE_COMPLETED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_VALIDATE_COMPLETED'', OLD.DATE_VALIDATE_COMPLETED, NEW.DATE_VALIDATE_COMPLETED);
	
END IF;
IF OLD.VALIDATOR_ANNOTATIONS IS NOT NULL AND (OLD.VALIDATOR_ANNOTATIONS <> NEW.VALIDATOR_ANNOTATIONS)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''VALIDATOR_ANNOTATIONS'', OLD.VALIDATOR_ANNOTATIONS, NEW.VALIDATOR_ANNOTATIONS);
	
END IF;
IF OLD.VALIDATE_STRING IS NOT NULL AND (OLD.VALIDATE_STRING <> NEW.VALIDATE_STRING)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''VALIDATE_STRING'', OLD.VALIDATE_STRING, NEW.VALIDATE_STRING);
	
END IF;
IF OLD.SUBJECT_ID IS NOT NULL AND (OLD.SUBJECT_ID <> NEW.SUBJECT_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''SUBJECT_ID'', OLD.SUBJECT_ID, NEW.SUBJECT_ID);
	
END IF;
IF OLD.DATE_CREATED IS NOT NULL AND (OLD.DATE_CREATED <> NEW.DATE_CREATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_CREATED'', OLD.DATE_CREATED, NEW.DATE_CREATED);
	
END IF;
IF OLD.DATE_UPDATED IS NOT NULL AND (OLD.DATE_UPDATED <> NEW.DATE_UPDATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_UPDATED'', OLD.DATE_UPDATED, NEW.DATE_UPDATED);
	
END IF;
IF OLD.OWNER_ID IS NOT NULL AND (OLD.OWNER_ID <> NEW.OWNER_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''OWNER_ID'', OLD.OWNER_ID, NEW.OWNER_ID);
	
END IF;
IF OLD.UPDATE_ID IS NOT NULL AND (OLD.UPDATE_ID <> NEW.UPDATE_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''UPDATE_ID'', OLD.UPDATE_ID, NEW.UPDATE_ID);
	
END IF;

return null;
END;
' LANGUAGE 'plpgsql';


CREATE TRIGGER eventcrf_AUDIT_TRIGGER
AFTER UPDATE
ON EVENT_CRF
FOR EACH ROW
EXECUTE PROCEDURE eventcrf_audit_sql();