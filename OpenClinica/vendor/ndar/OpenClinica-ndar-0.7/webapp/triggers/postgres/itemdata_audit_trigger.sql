DROP TRIGGER itemdata_AUDIT_TRIGGER ON ITEM_DATA;
DROP FUNCTION itemdata_AUDIT_SQL();


CREATE FUNCTION itemdata_AUDIT_SQL() RETURNS OPAQUE AS '
DECLARE
	pk INTEGER;
BEGIN 
SELECT INTO PK NEXTVAL(''audit_log_sequence'');

INSERT INTO AUDIT_EVENT (AUDIT_ID, AUDIT_DATE, AUDIT_TABLE, 
				USER_ID, ENTITY_ID, REASON_FOR_CHANGE)
	VALUES
	(pk, now(), 
	''ITEM_DATA'', 
	NEW.UPDATE_ID,
	NEW.ITEM_DATA_ID,
	''ITEM_DATA_UPDATE_TRIGGER_FIRED'');

IF OLD.ITEM_DATA_ID IS NOT NULL AND (OLD.ITEM_DATA_ID <> NEW.ITEM_DATA_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''ITEM_DATA_ID'', OLD.ITEM_DATA_ID, NEW.ITEM_DATA_ID);
	
END IF;

IF OLD.EVENT_CRF_ID IS NOT NULL AND (OLD.EVENT_CRF_ID <> NEW.EVENT_CRF_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''EVENT_CRF_ID'', OLD.EVENT_CRF_ID, NEW.EVENT_CRF_ID);
	
END IF;
IF OLD.ITEM_ID IS NOT NULL AND (OLD.ITEM_ID <> NEW.ITEM_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''ITEM_ID'', OLD.ITEM_ID, NEW.ITEM_ID);
	
END IF;
IF OLD.STATUS_ID IS NOT NULL AND (OLD.STATUS_ID <> NEW.STATUS_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''STATUS_ID'', OLD.STATUS_ID, NEW.STATUS_ID);
	
END IF;
IF OLD.DATE_CREATED IS NOT NULL AND (OLD.DATE_CREATED <> NEW.DATE_CREATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_CREATED'', OLD.DATE_CREATED, NEW.DATE_CREATED);
	
END IF;
IF OLD.DATE_UPDATED IS NOT NULL AND (OLD.DATE_UPDATED <> NEW.DATE_UPDATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_UPDATED'', OLD.DATE_UPDATED, NEW.DATE_UPDATED);
	
END IF;
IF OLD.OWNER_ID IS NOT NULL AND (OLD.OWNER_ID <> NEW.OWNER_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''OWNER_ID'', OLD.OWNER_ID, NEW.OWNER_ID);
	
END IF;
IF OLD.UPDATE_ID IS NOT NULL AND (OLD.UPDATE_ID <> NEW.UPDATE_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''UPDATE_ID'', OLD.UPDATE_ID, NEW.UPDATE_ID);
	
END IF;
IF OLD.VALUE IS NOT NULL AND (OLD.VALUE <> NEW.VALUE)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''VALUE'', OLD.VALUE, NEW.VALUE);
	
END IF;


return null;
END;
' LANGUAGE 'plpgsql';


CREATE TRIGGER itemdata_AUDIT_TRIGGER
AFTER UPDATE
ON ITEM_DATA
FOR EACH ROW
EXECUTE PROCEDURE itemdata_audit_sql();