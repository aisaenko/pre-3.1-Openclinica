DROP TRIGGER studyevent_AUDIT_TRIGGER ON STUDY_EVENT;
DROP FUNCTION studyevent_AUDIT_SQL();


CREATE FUNCTION studyevent_AUDIT_SQL() RETURNS OPAQUE AS '
DECLARE
	pk INTEGER;
BEGIN 
SELECT INTO PK NEXTVAL(''audit_log_sequence'');

INSERT INTO AUDIT_EVENT (AUDIT_ID, AUDIT_DATE, AUDIT_TABLE, 
				USER_ID, ENTITY_ID, REASON_FOR_CHANGE)
	VALUES
	(pk, now(), 
	''STUDY_EVENT'', 
	NEW.UPDATE_ID,
	NEW.STUDY_EVENT_ID,
	''UPDATE TRIGGER FIRED'');

IF OLD.STATUS_ID IS NOT NULL AND (OLD.STATUS_ID <> NEW.STATUS_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''STATUS_ID'', OLD.STATUS_ID, NEW.STATUS_ID);
	
END IF;
IF OLD.DATE_END IS NOT NULL AND (OLD.DATE_END <> NEW.DATE_END)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_END'', OLD.DATE_END, NEW.DATE_END);
	
END IF;
IF OLD.DATE_START IS NOT NULL AND (OLD.DATE_START <> NEW.DATE_START)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_START'', OLD.DATE_START, NEW.DATE_START);
	
END IF;
IF OLD.SAMPLE_ORDINAL IS NOT NULL AND (OLD.SAMPLE_ORDINAL <> NEW.SAMPLE_ORDINAL)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''SAMPLE_ORDINAL'', OLD.SAMPLE_ORDINAL, NEW.SAMPLE_ORDINAL);
	
END IF;
IF OLD.LOCATION IS NOT NULL AND (OLD.LOCATION <> NEW.LOCATION)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''LOCATION'', OLD.LOCATION, NEW.LOCATION);
	
END IF;
IF OLD.SUBJECT_ID IS NOT NULL AND (OLD.SUBJECT_ID <> NEW.SUBJECT_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''SUBJECT_ID'', OLD.SUBJECT_ID, NEW.SUBJECT_ID);
	
END IF;
IF OLD.STUDY_EVENT_DEFINITION_ID IS NOT NULL AND (OLD.STUDY_EVENT_DEFINITION_ID <> NEW.STUDY_EVENT_DEFINITION_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''STUDY_EVENT_DEFINITION_ID'', OLD.STUDY_EVENT_DEFINITION_ID, NEW.STUDY_EVENT_DEFINITION_ID);
	
END IF;
IF OLD.DATE_CREATED IS NOT NULL AND (OLD.DATE_CREATED <> NEW.DATE_CREATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_CREATED'', OLD.DATE_CREATED, NEW.DATE_CREATED);
	
END IF;
IF OLD.DATE_UPDATED IS NOT NULL AND (OLD.DATE_UPDATED <> NEW.DATE_UPDATED)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''DATE_UPDATED'', OLD.DATE_UPDATED, NEW.DATE_UPDATED);
	
END IF;
IF OLD.OWNER_ID IS NOT NULL AND (OLD.OWNER_ID <> NEW.OWNER_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''OWNER_ID'', OLD.OWNER_ID, NEW.OWNER_ID);
	
END IF;
IF OLD.UPDATE_ID IS NOT NULL AND (OLD.UPDATE_ID <> NEW.UPDATE_ID)
THEN
      INSERT INTO AUDIT_EVENT_VALUES (AUDIT_ID, COLUMN_NAME, OLD_VALUE, NEW_VALUE)
	VALUES
	(pk,''UPDATE_ID'', OLD.UPDATE_ID, NEW.UPDATE_ID);
	
END IF;

return null;
END;
' LANGUAGE 'plpgsql';


CREATE TRIGGER studyevent_AUDIT_TRIGGER
AFTER UPDATE
ON STUDY_EVENT
FOR EACH ROW
EXECUTE PROCEDURE studyevent_audit_sql();