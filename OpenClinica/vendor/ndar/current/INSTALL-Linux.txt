OPENCLINICA INSTALLATION GUIDE for RED HAT LINUX
OpenClinica Version 2.0
Document Version 1.1
--------------------------------------------------------------
Updated: November 10, 2006 jsampson@akazaresearch.com

This installation guide assumes that OpenClinica will be installed on a Linux-based server running Redhat ES 4 or compatible.
Installation was also tested on Redhat 8.0

Please contact contact@akazaresearch.com for services to assist with on-site or remote installation, validation and QA testing of OpenClinica to assure complete deployment.

Note: <login with user account> means logging into your Linux-based Server and running the commands that follow.  You will also need root privileges to install some components of the system.


About OpenClinica
------------------------------------------------------
Professional Open Source Solutions for the Clinical Research Enterprise

OpenClinica is a software platform for protocol configuration, design of Case Report Forms (CRFs), and electronic data capture, retrieval, and management. It is extensible, modular, standards-based, and open source.

More about OpenClincia: http://www.OpenClinica.org


Installation Summary
--------------------------------------------------------------
OpenClinica runs and depends on several external applications: Sun's Java Development Kit, Apache Jakarta's Tomcat Servlet Container, and the Postgres Relational Database. (NOTE: Building the PostgreSQL server from source as described in this document, requires gcc and its dependent libraries to be installed). Although many Linux systems already have these applications installed or can easily be installed, OpenClinica has been tested only on the vanilla packages provided by their respective websites. Although compatible with the packages supplied by your distribution, this manual does not assume distribution-specific installions of the required applications.

Note: This installation guide is intended to get OpenClinica up and running as easily as possible on a Linux server. It does not go into details for development of OpenClinica from the source code. This information will be available soon, and will cover setting up Apache Ant and Eclipse.

1) Install Java 2 SDK 1.5 Update 9
2) Install OpenClinica 2.0 Source
3) Install Tomcat 5.5.17
4) Install PostgreSQL 8.1.4
5) Install OpenClinica 2.0
6) Configure OpenClinica 2.0

Install Java 2 SDK 1.5 Update 9
--------------------------------------------------------------
This step might not required since many systems already have Java SDK installed. If there are any issues with applications or the system only has the Java run-time environment (JRE), please do the following steps. This will archive your previous installation and install the new version in its proper location.

If you want to download the SDK from the website please go to:
http://java.sun.com/javase/downloads/index.jsp
Download JDK 5.0 Update 9 and read the License. If you agree with the license, then continue. 
Under the Linux section click on the link labeled "self-extracting file" (not the RPM)

After you download it run the following commands:
sh jdk-1_5_0_09-linux-i586.bin;
<read license and press space until you get to bottom of screen, it will then extract>
su
<enter root password>
mv  jdk1.5.0_09 /usr/share/ 
cd /usr/share/
mv java java.old
ln -s jdk1.5.0_09 java
echo "export JAVA_HOME=/usr/share/java" >> /etc/profile;

More detailed installation instructions for the SDK can be found at http://java.sun.com/j2se/1.4.2/install-linux.html.


Install OpenClinica 2.0 Source
----------------------------------------------------
Create a user account and download OpenClinica from 
http://www.openclinica.org/entities/entity_details.php?eid=48.  

<login with user account>
tar -xzvf OpenClinica-2.0.tar.gz
su
mv OpenClinica-2.0 /var/
exit
cd /var/OpenClinica-2.0

Install Apache Tomcat 5.0
--------------------------------------------------------------
We will download the binary files of Tomcat to extract the file. We will then create a user called tomcat. Root will put it in a system directory and set the environment variable to point to the install directory.

<login with user account>
su - root
<enter password>

/usr/sbin/adduser tomcat
/usr/sbin/groupadd developers
gpasswd -a tomcat developers
su - tomcat
cd
wget http://archive.apache.org/dist/tomcat/tomcat-5/v5.5.17/bin/apache-tomcat-5.5.17.tar.gz
tar -zxvf apache-tomcat-5.5.17.tar.gz
exit
mv /home/tomcat/apache-tomcat-5.5.17 /usr/share/
cd /usr/share
ln -s apache-tomcat-5.5.17 tomcat
echo "export CATALINA_HOME=/usr/share/tomcat" >> /etc/profile
exit

To install Tomcat as a standalone service (one that stops and starts with the system) you must install a daemon. 

<login as root>
cp /var/OpenClinica-2.0/conf/tomcatd /etc/init.d/
cd /etc/init.d
chmod 755 tomcatd
/sbin/chkconfig --del tomcatd
/sbin/chkconfig --add tomcatd
<exit and reboot your system>

You can manually start and stop tomcat with these 
scripts
/usr/share/tomcat/bin/startup.sh
/usr/share/tomcat/bin/shutdown.sh

You can verify that tomcat is running by checking 
http://localhost:8080 

NOTE: If you are having difficulty getting the deamon to run at startup, assert that the line endings of the tomcatd file are the proper UNIX line terminators.

More detailed installation instructions for Apache Tomcat can be found at http://jakarta.apache.org/tomcat/tomcat-5.0-doc/setup.html.

PostgreSQL 8.1.4
--------------------------------------------------------------
For more information about installation please check the file called INSTALL after 
extracting the tar file. This is essentially the same set of scripts, modified to 
take the OpenClinica installation into account. This installion assumes that the development libraries
are properly installed, including gcc and make.

Go to http://www.postgresql.org/ftp/source/v8.1.4/ and select "postgresql-8.1.4.tar.gz". You will be presented with mirrors. Select one in your country and it will download.

<login with user account>
tar -xzvf postgresql-8.1.4.tar.gz
cd postgresql-8.1.4
./configure
gmake
su
gmake install
/usr/sbin/adduser postgres
gpasswd -a postgres developers
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
echo "export PGDATA=/usr/local/pgsql/data" >> /etc/profile;

Now setup postgres to run as a daemon

<login as root>
cp /var/OpenClinica-2.0/conf/postgresqld /etc/init.d/
cd /etc/init.d
chmod 755 postgresqld
/sbin/chkconfig --del postgresqld
/sbin/chkconfig --add postgresqld
<exit and reboot your system>
Check if postmaster is running, you should see several postgres processes
ps -A | grep postmaster

NOTE: If you are having difficulty getting the deamon to run at startup, assert that the line endings of the postgresqld file are the proper UNIX line terminators.


More detailed installation instructions for Postgres can be found at http://www.postgresql.org/docs/8.1/interactive/index.html.

<login with user account>
su - root
su - postgres
/usr/local/pgsql/bin/createdb openclinica
/usr/local/pgsql/bin/psql -d openclinica -f /var/OpenClinica-2.0/database/PostgreSQL/2.0/install/create_database_2_0_with_data.sql


OpenClinica Library Files
--------------------------------------------------------------
To run OpenClinica 2.0 in Tomcat, the following libraries are required:
activation.jar
jstl.jar
mail.jar
poi-2.5-final-20040302.jar
standard.jar
postgresql-8.1-405.jdbc3.jar
commons-digester.jar
commons-dbcp-1.2.1.jar
commons-collections-3.1.jar
commons-beanutils.jar
cos.jar

From version 2.0, you don't have to copy all the them into $CATALINA_HOME/common/lib, because they are included inside the OpenClinica.war file itself. But on many linux systems we tested, you will still need to copy the JDBC driver(postgresql-8.1-405.jdbc3.jar) into $CATALINA_HOME/common/lib in order to connect to the database. The jar file can be found in OpenClinica-2.0/webapp/WEB-INF/lib after you untar the OpenClinica tarball.



OpenClinica Configuration Files
--------------------------------------------------------------
The next step is to copy the configuration files and the web application file (war) to the tomcat folders. Since tomcat is running, it will hot deploy the application, creating the rest of the file structure. Next we will need to setup the applications configuration files.

<login with user account>
su
su - tomcat
cp /var/OpenClinica-2.0/lib/OpenClinica.war $CATALINA_HOME/webapps
cp /var/OpenClinica-2.0/conf/OpenClinica.xml $CATALINA_HOME/conf/Catalina/localhost

Note: Once Tomcat deploys the war file, you should be able to see $CATALINA_HOME/webapps/OpenClinica/ , if you cannot, try restarting Tomcat to kickstart the deployer.

There are three configuration files that need to be changed.

Edit $CATALINA_HOME/webapps/OpenClinica/properties/datainfo.properties and change the properties to suit your server environment as needed.  The initial datainfo.properties file looks something like this:

dbURL=jdbc:postgresql://localhost:5432/openclinica
filePath=/usr/share/tomcat/openclinica.data/
dataBase=postgres
passwd_expiration_time=180 
auth_mode=password
user_account_notification=email
smtpHost=localhost
adminEmail=admin@example.com
sysURL=https://localhost:8080/OpenClinica/MainMenu
change_passwd_required=0

dbURL: The uniform resource locator of your Postgres database.  Typically, the only thing you will have to change is 'localhost' to the address of your database server.

filePath: The path that files will be written to in the course of daily operations.  Note that this is a seperate directory because the webapps/OpenClinica directory can be erased and rebuilt when you deploy a new version of the system.  This directory will hold sensitive information such as CRFs, datasets, etc. so it should be on a secured machine.

dataBase: Currently only 'postgres' is the correct answer; for this release it should not change.  Upcoming releases will have options for an 'oracle' version of OpenClinica, however.

passwd_expiration_time: Number of days before you are prompted to change your password.  Lower numbers (30, 60, 90) will encourage users to change their passwords more often.

auth_mode: Currently only 'password' will work; you will be able to add other authentication modes in the future, including 'ldap'.

user_account_notification:  Can be either 'email' or 'offline'.  If it is 'email' the system will send an email to new users, notifying them that an account has been created for them.  If it is 'offline', then the system will not send an email and the administrator will have to contact the user personally to let them know that they have an account.

smtpHost: The current email SMTP Host that you will use to send emails to the users of the system.  Usually it is on another machine and will not be 'localhost'.

adminEmail: The reply email used in the emails to users of the system.

sysURL:  The address of the web address for the system.  Again, only 'localhost' should change on your system, and it can either be an external address (demo.openclinica.org) or an internal IP address (192.168.2.000).

change_passwd_required: Indiates whether users are forced to change their password when it expires. (Note: the first time a user logs into the system, the password is considered expired.)

Next, copy the OpenClinica.xml file into Tomcat's configuration file directory
cp /var/OpenClinica-2.0/conf/OpenClinica.xml $CATALINA_HOME/conf/Catalina/localhost/
Edit $CATALINA_HOME/conf/Catalina/localhost/OpenClinica.xml to fit your Tomcat enviroment variables.	A description of why this file is important and what it does can be found at http://jakarta.apache.org/tomcat/tomcat-5.0-doc/deployer-howto.html.  This file will contain the following XML:

	<Context path="/OpenClinica" docBase="OpenClinica" debug="99" reloadable="true" crossContext="true" useNaming="true">
	    <Parameter name="propertiesDir" value="C:\\tomcat\\webapps\\OpenClinica\\properties\\"  override="false"/> 
	    <Parameter name="datasetHomeDir" value="OpenClinica"  override="false"/>
	
	<Realm className="org.apache.catalina.realm.JDBCRealm" debug="99" driverName="org.postgresql.Driver" digest="MD5" 
		connectionURL="jdbc:postgresql://localhost:5432/openclinica"
		connectionName="clinica" connectionPassword="clinica" userTable="user_account" 
		userNameCol="user_name" userCredCol="passwd" 
		userRoleTable="study_user_role" roleNameCol="role_name"/>
	
	<Logger className="org.apache.catalina.logger.FileLogger" prefix="openclinica_log_1.0." 
	     suffix=".txt" timestamp="true"/> 
	     
	<Resource name="SQLPostgres" auth="Container" 
	  type="javax.sql.DataSource" factory="org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory"
	  		username="clinica"
	        password="clinica"
	  		driverClassName="org.postgresql.Driver"
	        url="jdbc:postgresql://localhost:5432/openclinica"  
	      maxActive="100" 
	   maxIdle="30" 
	   maxWait="10000"/>
	     
	</Context>
	
The propertiesDir file is using a Windows path, this will need to be updated, in this case you should change it to:
	    <Parameter name="propertiesDir" value="/usr/share/tomcat/webapps/OpenClinica/properties/"  override="false"/> 

The things that will have to be changed to fit your Tomcat environment are the security realm (indicated by the Realm tags) and the database resource (indicated by the Resource tags). Change the following items:
Realm properties:
	connectionURL = the address of your postgres database.
	connectionName = the username that will log in to the database.  Note that this is unique to the database system only, and is not a user on the Linux system.
	connectionPassword = the password that the database user 'clinica' will use to log in to the database.  NOTE that this should be something OTHER THAN 'clinica'.
SQLPostgres Resource properties
	username = same as connectionName
	password = same as connectionPassword
	url = same as connectionURL

Edit $CATALINA_HOME/webapps/OpenClinica/properties/facilityinfo.properties and change the settings there for your facility's name, address, state, etc that will be treated as the 'default' location and contact information for users and subjects.

# -----Facility information--------
FacName=Default GCRC
FacCity=Boston
FacState=MA
FacZIP=02142
FacCountry=USA
FacContactName=John Smith
FacContactDegree=PhD, MD
FacContactPhone=617-123-1234
FacContactEmail=aaa@aaa.org
# -----User Role information--------
ra=Data Entry Person
investigator=Investigator
director=Study Director
coordinator=Study Coordinator

Many of the fields above are self-explanatory; the user role names are to switch out the names we have in our system for names that are convention in your own study, i.e. Research Assistant instead of Data Entry Person.

Create Directory Structure
--------------------------------------------------------------
In the previous step, we defined the filePath in datainfo.properties. 
The default value is filePath=/usr/local/tomcat/openclinica.data/, but it can be any value you wish.  Make sure you have the path defined as the filePath on the server, and the path must be accessible by Tomcat user. 

This path is required for saving uploaded CRFs and archived dataset files. 
Also, it is the home for the CRF spreadsheet template.  To offer the template through your system, create a folder "crf" under the path and copy /var/OpenClinica-2.0/conf/CRF_Design_Template.xls into it.
	
For example, if the filePath=/usr/share/tomcat/openclinica.data/, you can
cp /var/OpenClinica-2.0/conf/CRF_Design_Template.xls /usr/share/tomcat/openclinica.data/crf/

The final CRF and dataset file structure will be like the following:
+---filePath
+---crf                                 -  crf  blank template (CRF_Design_Template.xls )
      +---new                           -  crf verion templates reorganized by system (.xls)
      +---original                      - crf original templates uploaded from user's local machine (.xls)
+---datasets
    +---21                              - dataset files (.txt, .dat, .sps)
    +---22                              - dataset files (.txt, .dat, .sps)
    +---25                              - dataset files (.txt, .dat, .sps)
    +---etc.                            - dataset files (.txt, .dat, .sps)
    
The folders 'new', 'original', and 'datasets' will be created by OpenClinica application if they don't exist on the server. But you should create 'filePath','crf' manually before using the application.

Note: Make sure the tomcat user has write permissions on all of these directories.

Configure HTTPS
--------------------------------------------------------------
First generate an SSL Certificate. Please go to the Apache website for a more detailed explanation:
http://jakarta.apache.org/tomcat/tomcat-5.0-doc/ssl-howto.html

In summary of the above HOWTO, run the following commands:

<login as root>
su - tomcat
$JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA
exit

and specify the password. The default Tomcat password is "changeit". NOTE that you should please use another password.

In $CATALINA_HOME/conf/server.xml comment out the Connector whose port is 8080. Like the example below:

<!--
<Connector port="8080"
	maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
	enableLookups="false" redirectPort="8443" acceptCount="100"
	debug="0" connectionTimeout="20000" 
	disableUploadTimeout="true" />
-->

Then enable the Connector whose port is 8443. And be sure to specify the password. 
The Connector should look like this:

<Connector port="8443" 
	maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
	enableLookups="false" disableUploadTimeout="true"
	acceptCount="100" debug="0" scheme="https" secure="true"
	clientAuth="false" sslProtocol="TLS" 
	keystorePass="changeit"
/>
        
        
For Tomcat to run in port 443 (https), Tomcat will need to run as root or a rerouting must enabled at the firewall level. We discourage running Tomcat as root so the following explains how to setup iptables to redirect traffic from port 8443 to 443. When redirecting port, the localhost will still need to access in port 8443 and external users will see it in port 443.

<login as root>
/sbin/iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443

Then save the iptables configuration, so it can be loaded at system boot.
/sbin/iptables-save > /etc/sysconfig/iptables
<exit and reboot>

NOTE: SSL connections have not been fully tested for Tomcat 5.5, but we believe these instructions for 5.0 should be adequate.

Setting Up The Data Warehouse
--------------------------------------------------------------
In order to run queries on data, a data warehouse table needs to be created that will compile data automatically while users are entering it on the system.  The script that does this is contained in /var/OpenClinica-2.0/conf/pg_data_warehouse.sql; a cron job must be set up on the Linux server to run the script on a regular basis.  Documentation about the cron job can also be found in the conf directory.

Future versions of OpenClinica will not require the cron job, as we are working on a scheduler to manage these events.

You will have to add a line to the crontab for the user postgres (Note: crontab defaults to using vi as an editor, if you are more comfortable with emacs or some other text editor, try calling export EDITOR=emacs before running crontab)

<login as root>
su - postgres
crontab -e

add the following row to the table
0 0 * * * /usr/local/pgsql/bin/psql -U clinica -d openclinica -f /var/OpenClinica-2.0/conf/pg_data_warehouse.sql

This will setup a cron job that will update the data warehouse daily at midnight.

Verify System Environment
--------------------------------------------------------------
The following set of tasks must be conducted to ensure the system is correctly setup and 
integrated for user testing.

1. First ensure that Tomcat is running and properly configured in Linux:
	Login as root and type "su - tomcat" to login as tomcat
	Type ps aux | grep tomcat and see if it is running
	Type env | grep CATALINA_HOME and make sure that it is set

2. Ensure that Postgres is running:
	Login as postgres and type "su - postgres" to login as postgres
	Type ps aux | grep postmaster and see if it is running
	Type env | grep PGDATA and make sure that it is set.

3. Verify Tomcat deployed the web application.
	Check $CATALINA_HOME/webapps for an OpenClinica directory.
	
4. Test in browser.
	On the server, if browser is installed, type https://<hostname>:8443/OpenClinica
	If it loads the OpenClinica page, then the installation is OK. Next, load the 
	https://<hostname>/OpenClinica on a remote machine that can access the server.
	(NOTE: If you are 

5. Login.
	Login with the username "root" and the password "12345678". Please change this password as soon as you log in. The root user will be assigned a default project called "default". Create a technical admininstrator login for youself and remove the default root user and other "demo" accounts. 

6. To Upload a Case Report Form (CRF):
	After logging in as a Manager/Study Director/Administrator, go to Manage Study -> CRFs -> Create New CRF.  After entering the general name and description for the CRF, you will be prompted for information about the first version and asked to upload the CRF spreadsheet, a version of which is provided in the conf directory.  After checking all the fields, you will be prompted to confirm the new CRF and version and it will appear in your study in the OpenClinica application.


Validation and Testing
--------------------------------------------------------------
Please contact contact@akazaresearch.com for services to assist with on-site 
or remote installation, validation and QA testing of OpenClinica to assure complete deployment.


Developer and Contact Information
--------------------------------------------------------------
Akaza Research, based in Cambridge, MA, provides open informatics solutions
that address the needs of institutions engaged in clinical, healthcare and biomedical research. 

Akaza utilizes internally- and community-developed open source software and 
open standards to provide professional services for the clinical research enterprise. These open solutions enable Akaza's academic customers to effectively address the challenges of data management, compliance, and interoperability in the modern clinical and healthcare research environment.

Akaza Research
One Kendall Square
Bldg. 400, 4th Floor
Cambridge, MA 02139
phone: 617.621.8585
fax: 617.621.0065
email: contact@akazaresearch.com

For more about Akaza's products and initiatives see: 
http://www.OpenClinica.org
